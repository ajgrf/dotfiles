#+TITLE: Emacs Configuration
#+AUTHOR: Alex Griffin
#+PROPERTY: header-args :tangle yes

* Initialization

This file describes my emacs configuration in a literate programming style.
To use it, put the following code in ~/.emacs.d/init.el:

#+BEGIN_SRC emacs-lisp :tangle no
  (require 'org)
  (org-babel-load-file
   (expand-file-name "emacs.org"
                     user-emacs-directory))
#+END_SRC

That assumes this file is saved in ~/.emacs.d/emacs.org.  However, you do not
want to use it as-is unless you are me. ;-)

Use lexical scoping rules.

#+BEGIN_SRC emacs-lisp
  ;;; -*- lexical-binding: t -*-
#+END_SRC

** Clean Up Interface

By default, Emacs' interface is a little too busy for me.

Disable the tool bar and menu bar.  Most people also seem to disable the
scroll bar, but I don't know why.

#+BEGIN_SRC emacs-lisp
  (if (fboundp 'tool-bar-mode) (tool-bar-mode -1))
  (if (fboundp 'menu-bar-mode) (menu-bar-mode -1))
#+END_SRC

Don't show the normal Emacs welcome screen or related messages.

#+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-message t)
  (defun display-startup-echo-area-message ()
    (message ""))
#+END_SRC

Don't show any initial text in the scratch buffer.

#+BEGIN_SRC
  (setq initial-scratch-message "")
#+END_SRC

*** TODO Kill *scratch* buffer too
*** TODO Default to shell instead

#+BEGIN_SRC emacs-lisp
  (add-hook 'emacs-startup-hook
            (setq initial-buffer-choice 'shell))
#+END_SRC

** Unintegrated

Leuven is the one true theme.

#+BEGIN_SRC emacs-lisp
  (load-theme 'leuven)
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (fset 'yes-or-no-p 'y-or-n-p)

  (setq custom-file (concat user-emacs-directory "custom.el"))
  (load custom-file t)

  (setq make-backup-files nil)

  (setq-default indent-tabs-mode nil)

  (setq ido-enable-flex-matching t)
  (setq ido-everywhere t)
  (ido-mode 1)

  (setq frame-title-format "%b - GNU Emacs")
  (setq icon-title-format frame-title-format)

  (setq mouse-autoselect-window t)
#+END_SRC

** Validate TLS Connections

This still requires tweaking, it rejects too many connections.
See [[https://glyph.twistedmatrix.com/2015/11/editor-malware.html][Your Text Editor Is Malware]].

#+BEGIN_SRC emacs-lisp
  (let ((trustfile
         (replace-regexp-in-string
          "\\\\" "/"
          (replace-regexp-in-string
           "\n" ""
           (shell-command-to-string "python -m certifi")))))
    (setq tls-checktrust t
          gnutls-verify-error t
          ;; gnutls-trustfiles (list trustfile)
          tls-program (list
                       (format "gnutls-cli%s --x509cafile %s -p %%p %%h"
                               (if (eq window-system 'w32) ".exe" "")
                               trustfile))))
#+END_SRC

* Packages

** Specify Package Repositories

Use TLS for ELPA, and add MELPA as an additional repository.

#+BEGIN_SRC emacs-lisp
  (require 'package)
  (setq package-archives
        '(("gnu" . "https://elpa.gnu.org/packages/")
          ("melpa" . "https://melpa.org/packages/")))
  (package-initialize)
#+END_SRC

** Set up use-package

Every other package will be managed by use-package, so it needs to be

#+BEGIN_SRC emacs-lisp
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))
  (require 'use-package)
#+END_SRC

* Evil

#+BEGIN_SRC emacs-lisp
  (use-package evil
    :ensure t
    :config
    (evil-mode 1)
    (define-key evil-normal-state-map "n" 'evil-next-line)
    (define-key evil-normal-state-map "e" 'evil-previous-line)
    (define-key evil-normal-state-map "i" 'evil-forward-char)
    (define-key evil-normal-state-map "k" 'evil-search-next)
    (define-key evil-normal-state-map "u" 'evil-insert)
    (define-key evil-normal-state-map "l" 'undo-tree-undo)
    (define-key evil-normal-state-map "j" 'evil-forward-word-end))
#+END_SRC

** TODO Colemak

* Org Mode

** Nicer Display

Indent nodes to the appropriate level, and use real bullets instead of
asterisks.

#+BEGIN_SRC emacs-lisp
  (setq org-startup-folded 'content)
  (setq org-startup-with-inline-images t)

  (add-hook 'org-mode-hook (lambda () (org-indent-mode 1)))

  (use-package org-bullets
    :commands org-bullets-mode
    :init
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
#+END_SRC

** Agenda

Search my org directory for agenda items.

#+BEGIN_SRC emacs-lisp
  (setq org-agenda-files '("~/Documents/Org/"))
#+END_SRC

** Task Keywords

#+BEGIN_SRC emacs-lisp
  (setq org-todo-keywords
        '((sequence "TODO" "WAITING" "NEXT" "DONE")))
#+END_SRC

** Capture
** Archive

* Ledger

#+BEGIN_SRC emacs-lisp
  (use-package ledger-mode
    :init
    (add-to-list 'auto-mode-alist '("\\.ledger$" . ledger-mode))
    :config
    (customize-set-variable 'ledger-post-auto-adjust-amounts t)
    (customize-set-variable 'ledger-init-file-name "/home/ajgrf/.ledgerrc")
    (customize-set-variable 'ledger-clear-whole-transactions t))
#+END_SRC

* Programming

** git

#+BEGIN_SRC emacs-lisp
  (use-package magit
    :bind
    ("C-x g" . magit-status))
#+END_SRC

** Languages
*** C
*** Go
*** Scheme
*** sh
