#+TITLE: My Doom Emacs Configuration
#+AUTHOR: Alex Griffin
#+STARTUP: content

* Introduction

This file describes my Doom Emacs configuration in a literate programming style.
Doom automatically tangles src blocks in this file to =DOOMDIR/config.el= on
save or when ~doom sync~ is executed.

Begin =config.el= by enabling lexical binding.

#+BEGIN_SRC emacs-lisp
;;; $DOOMDIR/config.el -*- lexical-binding: t; -*-
#+END_SRC

Some functionality uses this to identify you, e.g. GPG configuration, email
clients, file templates and snippets.

#+BEGIN_SRC emacs-lisp
(setq user-full-name "Alex Griffin"
      user-mail-address "a@ajgrf.com")
#+END_SRC

* Appearance

** Fonts

Doom exposes five (optional) variables for controlling fonts in Doom. Here
are the three important ones:

+ ~doom-font~
+ ~doom-variable-pitch-font~
+ ~doom-big-font~ -- used for ~doom-big-font-mode~; use this for
  presentations or streaming.

They all accept either a font-spec, font string ("Input Mono-12"), or xlfd
font string.

#+BEGIN_SRC emacs-lisp
(setq doom-font (font-spec :family "Iosevka" :size 12.0)
      doom-serif-font (font-spec :family "Iosevka Slab Light")
      doom-variable-pitch-font (font-spec :family "Iosevka Aile"))
#+END_SRC

** Themes

There are two ways to load a theme. Both assume the theme is installed and
available. You can either set ~doom-theme~ or manually load a theme with the
~load-theme~ function.

#+BEGIN_SRC emacs-lisp
(setq doom-theme 'doom-gruvbox)
#+END_SRC

Select theme by time of day:

#+BEGIN_SRC emacs-lisp
(use-package! circadian
  :if (= (display-color-cells) 16777216)
  :hook (after-init . circadian-setup)
  :config
  (defun ajgrf/load-kde-theme (theme)
    (let ((kde-theme (if (eq theme 'doom-gruvbox)
                         "org.kde.breezedark.desktop"
                       "org.kde.breezetwilight.desktop")))
      (start-process "lookandfeeltool" nil "lookandfeeltool"
                     "--apply" kde-theme)))

  (let* ((location-set? (and calendar-latitude calendar-longitude t))
         (day (if location-set? :sunrise "7:30"))
         (night (if location-set? :sunset "19:30")))
    (setq circadian-themes `((,day . doom-gruvbox-light)
                             (,night . doom-gruvbox)))

    (when (executable-find "lookandfeeltool")
      (add-hook! 'circadian-after-load-theme-hook #'ajgrf/load-kde-theme))))
#+END_SRC

*** Doom Themes

What started as my attempt to improve ~doom-gruvbox-light~ and its consistency
with ~doom-gruvbox~, ended with me largely remaking Gruvbox in Parchment's
image.

#+BEGIN_SRC emacs-lisp
(setq doom-gruvbox-light-variant "hard")
(custom-theme-set-faces! '(doom-gruvbox doom-gruvbox-light)
  `(cider-repl-prompt-face :foreground ,(doom-color 'blue) :inherit bold)
  `(clojure-keyword-face :foreground ,(doom-color 'blue))
  `(comint-highlight-prompt :foreground ,(doom-color 'cyan))
  `(css-property :foreground ,(doom-color 'fg))
  `(doom-modeline-buffer-major-mode :inherit bold)
  `(doom-modeline-buffer-minor-mode :inherit font-lock-comment-face)
  `(doom-modeline-buffer-path :foreground ,(doom-color 'blue) :inherit bold)
  `(doom-modeline-project-dir :inherit doom-modeline-buffer-path)
  `(eshell-prompt :foreground ,(doom-color 'blue) :inherit bold)
  `(eshell-syntax-highlighting-shell-command-face :foreground ,(doom-color 'fg))
  `(font-lock-builtin-face :foreground ,(doom-color 'blue))
  `(font-lock-doc-face :foreground ,(doom-color 'green))
  `(font-lock-preprocessor-face :foreground ,(doom-color 'violet))
  `(font-lock-type-face :foreground ,(doom-color 'blue))
  `((font-lock-constant-face font-lock-function-name-face
     font-lock-keyword-face font-lock-variable-name-face
     highlight-numbers-number highlight-quoted-quote highlight-quoted-symbol)
    :foreground ,(doom-color 'fg))
  `(git-commit-summary :foreground ,(doom-color 'fg))
  `(ledger-font-posting-amount-face :foreground ,(doom-color 'fg))
  `(link :foreground ,(doom-color 'cyan) :inherit bold :underline t)
  `(link-visited :foreground ,(doom-color 'violet) :inherit bold :underline t)
  `(markdown-bold-face :inherit bold)
  `(markdown-gfm-checkbox-face :foreground ,(doom-color 'red) :inherit bold)
  `(markdown-header-delimiter-face :inherit font-lock-comment-face)
  `(markdown-inline-code-face :foreground ,(doom-color 'orange))
  `(markdown-italic-face :inherit italic)
  `(markdown-link-face :foreground ,(doom-color 'fg))
  `(markdown-link-title-face :inherit bold)
  `(markdown-list-face :foreground ,(doom-color 'fg))
  `(markdown-plain-url-face :inherit markdown-url-face)
  `(markdown-table-face :foreground ,(doom-color 'cyan))
  `(markdown-url-face :inherit link)
  `(minibuffer-prompt :foreground ,(doom-color 'cyan))
  `(org-agenda-structure :inherit bold)
  `(org-date :foreground ,(doom-color 'blue) :underline t)
  `(org-document-title :inherit bold)
  `(org-document-info :inherit italic)
  `(org-drawer :foreground ,(doom-lighten (doom-color 'cyan) 0.4))
  `(org-scheduled :foreground ,(doom-color 'fg))
  `(org-scheduled-today :foreground ,(doom-color 'fg-alt))
  `(org-special-keyword :inherit font-lock-comment-face)
  `((org-level-1 markdown-header-face-1 outline-1 rst-level-1)
    :foreground ,(doom-color 'violet))
  `((org-level-2 markdown-header-face-2 outline-2 rst-level-2)
    :foreground ,(doom-color 'blue))
  `((org-level-3 markdown-header-face-3 outline-3 rst-level-3)
    :foreground ,(doom-color 'cyan))
  `((org-level-4 markdown-header-face-4 outline-4 rst-level-4)
    :foreground ,(doom-color 'green))
  `((org-level-5 markdown-header-face-5 outline-5 rst-level-5)
    :foreground ,(doom-color 'yellow))
  `((org-level-6 markdown-header-face-6 outline-6 rst-level-6)
    :foreground ,(doom-color 'orange))
  `((org-level-7 outline-7) :foreground ,(doom-color 'red))
  `((org-level-8 outline-8) :inherit font-lock-comment-face)
  `(org-property-value :foreground ,(doom-color 'fg))
  `(org-table :foreground ,(doom-color 'cyan))
  `(org-meta-line :inherit font-lock-comment-face)
  `(transient-key :foreground ,(doom-color 'violet))
  `(web-mode-html-attr-name-face :foreground ,(doom-color 'fg))
  `(which-key-command-description-face :foreground ,(doom-color 'fg))
  `(which-key-group-description-face :foreground ,(doom-color 'blue))
  `(which-key-key-face :foreground ,(doom-color 'violet)))
#+END_SRC

*** Modus Themes

A pair of highly accessible themes that conform with the WCAG AAA standard for
colour contrast between background and foreground combinations.

#+BEGIN_SRC emacs-lisp
(use-package! modus-themes
  :defer t
  :init
  (setq modus-themes-slanted-constructs t
        modus-themes-prompts 'subtle
        modus-themes-completions 'opinionated
        modus-themes-fringes 'subtle
        modus-themes-org-blocks 'greyscale
        modus-themes-headings '((t . section))
        modus-themes-scale-headings t
        modus-themes-variable-pitch-headings t))
#+END_SRC

*** Parchment

My own light editor theme for Vim and Emacs, inspired by Acme and Leuven.

#+BEGIN_SRC emacs-lisp
(use-package! parchment-theme
  :defer t
  :config
  (after! solaire-mode
    (add-to-list 'solaire-mode-themes-to-face-swap "parchment"))
  (setq parchment-add-mode-hooks t)
  ;; Switch to Go Mono when using parchment.
  (let ((old-font doom-font))
    (add-hook! 'doom-load-theme-hook :append
      (setq doom-font (if (eq doom-theme 'parchment)
                          (font-spec :family "Go Mono" :size 11.0)
                        old-font))
      (doom/reload-font))))
#+END_SRC

*** Disable Rainbow Delimiters

Rainbow delimiters can't be safely disabled in Doom, so just neuter it.

#+BEGIN_SRC emacs-lisp
(custom-set-faces!
  '((rainbow-delimiters-depth-1-face rainbow-delimiters-depth-2-face
     rainbow-delimiters-depth-3-face rainbow-delimiters-depth-4-face
     rainbow-delimiters-depth-5-face rainbow-delimiters-depth-6-face
     rainbow-delimiters-depth-7-face rainbow-delimiters-depth-8-face
     rainbow-delimiters-depth-9-face)
    :foreground nil :background nil :weight normal))
#+END_SRC

** Interface Elements

This determines the style of line numbers in effect. If set to =nil=, line
numbers are disabled. For relative line numbers, set this to =relative=.

#+BEGIN_SRC emacs-lisp
(setq display-line-numbers-type t)
#+END_SRC

Remove Doom branding from title bar.

#+BEGIN_SRC emacs-lisp
(setq frame-title-format "%b - GNU Emacs"
      icon-title-format frame-title-format)
#+END_SRC

Update Terminal emulator title.

#+BEGIN_SRC emacs-lisp
(when (featurep! :os tty)
  (add-hook! after-init :append
    (use-package! term/xterm
      :if (and (not window-system)
               (not noninteractive))
      :hook (post-command . xterm-set-window-title))))
#+END_SRC

Set initial window geometry to 90x50 characters.

#+BEGIN_SRC emacs-lisp
(add-to-list 'default-frame-alist '(width . 90))
(add-to-list 'default-frame-alist '(height . 50))
#+END_SRC

List minor modes behind a menu in the mode-line.

#+BEGIN_SRC emacs-lisp
(use-package! minions
  :config
  (setq doom-modeline-minor-modes t
        minions-direct '(emms))
  (minions-mode 1))
#+END_SRC

* Keybindings

Set leader keys.

#+BEGIN_SRC emacs-lisp
(setq doom-leader-key "SPC"
      doom-leader-alt-key "C-SPC"
      doom-localleader-key "SPC m"
      doom-localleader-alt-key "C-SPC m")
#+END_SRC

The comma key also works as the local leader.

#+BEGIN_SRC emacs-lisp
(map! :nvm ","   (general-simulate-key "SPC m")
      :ei  "C-," (general-simulate-key "C-SPC m"))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(map! :n   "gY"  #'ajgrf/youtube-dl-url

      :leader
      (:prefix ("o" . "open")
       :desc "Calculator"            "c" #'calc
       (:when (featurep! :app rss)
        :desc "News Reader"          "n" #'elfeed))

      (:when (featurep! :tools magit)
        (:prefix ("g" . "git")
          :desc "Dotfiles status"    "d" #'ajgrf/dotfiles-magit-status))

      (:when (featurep! :lang org)
        (:prefix ("n" . "notes")
          (:desc "Open plan"         "p" #'ajgrf/find-plan-file)))

      (:prefix ("t" . "toggle")
        :desc "Auto Fill"            "F" #'auto-fill-mode
        :desc "Truncate lines"       "t" #'toggle-truncate-lines
        :desc "Visible whitespace"   "w" #'whitespace-mode

        (:prefix ("h" . "highlight")
          :desc "Current line"       "h" #'hl-line-mode
          :desc "Highlight regexp"   "r" #'highlight-regexp
          :desc "Unhighlight regexp" "u" #'unhighlight-regexp
          :desc "Matching lines"     "l" #'highlight-lines-matching-regexp
          :desc "Hi Lock mode"       "U" #'hi-lock-mode)))
#+END_SRC

* File Management

#+BEGIN_SRC emacs-lisp
(setq delete-by-moving-to-trash t
      image-dired-external-viewermage nil)
#+END_SRC

Respect PATH on remote machines.

#+BEGIN_SRC emacs-lisp
(after! tramp
  (add-to-list 'tramp-remote-path 'tramp-own-remote-path))
#+END_SRC

URL associations & trash fix on WSL.

#+BEGIN_SRC emacs-lisp
(when IS-WSL
  (setq browse-url-generic-program  "wslview"
        browse-url-generic-args     '()
        browse-url-browser-function #'browse-url-generic
        delete-by-moving-to-trash nil))
#+END_SRC

* Editor
** Completion (:completion ivy)

#+BEGIN_SRC emacs-lisp
(setq ivy-magic-tilde nil
      counsel-projectile-switch-project-action 'dired)
#+END_SRC

** Auto-Formatting (:editor format)

Disable automatic formatting for the following file types:

#+BEGIN_SRC emacs-lisp
(setq +format-on-save-enabled-modes
      '(not emacs-lisp-mode  ; elisp's mechanisms are good enough
            sql-mode         ; sqlformat is currently broken
            tex-mode         ; latexindent is broken
            latex-mode
            ledger-mode))    ; sorting mangles my file
#+END_SRC

** Spellchecking

Set up spellchecking powered by =aspell=:

#+BEGIN_SRC emacs-lisp
(setq-default ispell-local-dictionary "en")
#+END_SRC

** Popup Rules (:ui popup)

#+BEGIN_SRC emacs-lisp
(when (featurep! :ui popup)
  (set-popup-rules!
    '(("^\\*Ledger Report" :size 25)
      ("^\\*youtube-dl"       :vslot -2)
      ("^\\*youtube-dl\\*<2>" :vslot -3)
      ("^\\*youtube-dl\\*<3>" :vslot -4)
      ("^\\*youtube-dl\\*<4>" :vslot -5)
      ("^\\*youtube-dl\\*<5>" :vslot -6))))
#+END_SRC

* Org Mode (:lang org)

My life in plain text.

#+BEGIN_SRC emacs-lisp
(setq org-directory "~/Nextcloud/Org/")
(when (featurep! :lang org)
  (after! org
    (setq org-agenda-files (concat org-directory "/agenda.txt")
          org-agenda-log-mode-items '(closed clock state)
          org-agenda-span 'day
          org-agenda-start-day nil
          org-agenda-timegrid-use-ampm t
          org-agenda-todo-ignore-scheduled t
          org-capture-templates
          '(("t" "Task" entry (file+headline "plan.org" "Tasks")
             "* TODO %?\n %i\n  %a\n")
            ("a" "Appointment" entry (file+headline "plan.org" "Calendar")
             "* %?\n %i\n  %a\n")
            ("f" "FOCUS Task" entry (file+headline "plan.org" "FOCUS")
             "* TODO %?\n %i\n  %a\n"))
          org-default-notes-file (concat org-directory "/inbox.org")
          org-fontify-done-headline nil
          org-link-abbrev-alist '(("attach" . org-attach-expand-link))
          org-log-into-drawer "LOGBOOK"
          org-outline-path-complete-in-steps nil
          org-refile-allow-creating-parent-nodes 'confirm
          org-refile-targets '((ajgrf/get-org-files :maxlevel . 3))
          org-refile-use-outline-path 'file
          org-return-follows-link t
          org-startup-folded 'showall
          org-startup-with-inline-images t
          org-todo-keywords '((sequence "TODO(t)" "WAITING(w)" "DONE(d!)"))
          holiday-bahai-holidays nil
          holiday-hebrew-holidays nil
          holiday-islamic-holidays nil
          holiday-oriental-holidays nil
          holiday-other-holidays '((holiday-fixed 5 5 "Cinco de Mayo")))
    (add-to-list 'org-modules 'org-attach)
    (add-to-list 'org-modules 'org-depend)
    (add-to-list 'org-modules 'org-habit)

    (map! :localleader
          :map org-mode-map
          "u" #'org-update-all-dblocks
          :map org-agenda-mode-map
          "l" #'org-agenda-log-mode)))
#+END_SRC

** Pomodoro Support

#+BEGIN_SRC emacs-lisp
(when (featurep! :lang org +pomodoro)
  (setq org-pomodoro-keep-killed-pomodoro-time t)
  (map! :leader
        (:prefix ("n" . "notes")
         :desc "Toggle Pomodoro" "P" #'org-pomodoro)
        :localleader
        :map (org-mode-map org-agenda-mode-map)
        (:prefix ("c" . "clock")
         "p" #'org-pomodoro)))
#+END_SRC

** Alerts on WSL

#+BEGIN_SRC emacs-lisp
(when IS-WSL
  (after! alert
    (require 'alert-toast)
    (setq alert-default-style 'toast)
    (add-to-list 'alert-user-configuration
                 '(((:category . "org-pomodoro")) toast nil))))

#+END_SRC

** Multiple Clocks

Support running multiple org-clocks in parallel.

#+BEGIN_SRC emacs-lisp
(when (featurep! :lang org)
  (use-package! org-multi-clock
    :config
    (map! [remap org-clock-in] #'omc-make-new-parallel-clock
          :leader
          (:prefix ("n" . "notes")
           :desc "Set active org-clock" ":" #'omc-set-active-clock))))
#+END_SRC

** [[https://github.com/chenyanming/shrface][Use Org Faces Elsewhere]]

Extend shr/eww with Org features and faces.

#+BEGIN_SRC emacs-lisp
(with-eval-after-load 'shr
  (require 'shrface)
  (shrface-basic) ; enable shrfaces, must be called before loading eww/dash-docs/nov.el
  (shrface-trial) ; enable shrface experimental face(s), must be called before loading eww/dash-docs/nov.el
  (setq shrface-href-versatile t) ; enable versatile URL faces support
                                  ; (http/https/ftp/file/mailto/other), if
                                  ; `shrface-href-versatile' is nil, default
                                  ; face `shrface-href-face' would be used.
  (setq shrface-toggle-bullets nil) ; Set t if you do not like headline bullets

  ;; eww support
  (with-eval-after-load 'eww
    (add-hook 'eww-after-render-hook 'shrface-mode))

  ;; nov support
  (with-eval-after-load 'nov
    (setq nov-shr-rendering-functions '((img . nov-render-img) (title . nov-render-title))) ; reset nov-shr-rendering-functions, in case of the list get bigger and bigger
    (setq nov-shr-rendering-functions (append nov-shr-rendering-functions shr-external-rendering-functions))
    (add-hook 'nov-mode-hook 'shrface-mode))

  ;; mu4e support
  (with-eval-after-load 'mu4e
    (add-hook 'mu4e-view-mode-hook 'shrface-mode)))
#+END_SRC

** TODO Set up [[https://github.com/akhramov/org-wild-notifier.el][org-wild-notifier.el]]

* Applications

** Feed Aggregator (:app rss)

#+BEGIN_SRC emacs-lisp
(when (featurep! :app rss)
  (use-package! elfeed
    :commands elfeed
    :config
    (require 'xdg)
    (setq elfeed-enclosure-default-dir (or (xdg-user-dir "DESKTOP")
                                           "~/Desktop")
          elfeed-search-filter "@1-month-ago +unread ")
    ;; Sync feeds with Nextcloud. Log in by running:
    ;; (customize-save-variable
    ;;  'elfeed-feeds '(("owncloud+http://user@server" :use-authinfo t)))
    (elfeed-protocol-enable)))
#+END_SRC

* Tools

** direnv (:tools direnv)

#+BEGIN_SRC emacs-lisp
(setq direnv-always-show-summary nil)
#+END_SRC

** Git (:tools magit)

#+BEGIN_SRC emacs-lisp
(defvar dotfiles-git-dir
  (expand-file-name "~/.dot")
  "Location of dotfiles git directory.")

(when (featurep! :tools magit)
  (setq forge-topic-list-limit -5)

  (when IS-WINDOWS
    (setenv "SSH_ASKPASS" "git-gui--askpass"))

  (defadvice! with-dotfiles-git-dir (orig-fn &optional directory cache)
    "Support separate git directory for dotfiles in home."
    :around 'magit-status
    (let* ((git-dir-arg (concat "--git-dir=" dotfiles-git-dir))
           (cache (if (member git-dir-arg magit-git-global-arguments)
                      nil
                    cache)))
      (if (string= directory "~/")
          (add-to-list 'magit-git-global-arguments git-dir-arg)
        (setq magit-git-global-arguments
              (remove git-dir-arg magit-git-global-arguments)))
      (apply orig-fn (list directory cache)))))

#+END_SRC

** PDF Tools (:tools pdf)

#+BEGIN_SRC emacs-lisp
(when (featurep! :tools pdf)
  (add-hook! 'pdf-view-mode-hook
    (pdf-view-auto-slice-minor-mode 1))

  (map! :map pdf-view-mode-map
        :n "J" #'pdf-view-next-page
        :n "K" #'pdf-view-previous-page
        :n "<tab>" #'pdf-outline

        :localleader
        "t" #'pdf-view-midnight-minor-mode)

  ;; Fix mysterious autoload issues:
  (use-package! pdf-occur
    :commands pdf-occur-global-minor-mode)
  (use-package! pdf-history
    :commands pdf-history-minor-mode)
  (use-package! pdf-links
    :commands pdf-links-minor-mode)
  (use-package! pdf-outline
    :commands pdf-outline-minor-mode)
  (use-package! pdf-annot
    :commands pdf-annot-minor-mode)
  (use-package! pdf-sync
    :commands pdf-sync-minor-mode))
#+END_SRC

* Languages

** C/C++ (:lang cc)

Default to sane indent rules for C.

#+BEGIN_SRC emacs-lisp
(add-hook! c-mode
  (setq indent-tabs-mode t)
  (add-to-list 'c-default-style '(c-mode . "linux")))
#+END_SRC

** JavaScript (:lang javascript)

#+BEGIN_SRC emacs-lisp
(setq js-indent-level 2
      json-reformat:indent-width 2
      typescript-indent-level 2)
#+END_SRC

** Ledger (:lang ledger)

Ledger is a powerful, double-entry accounting system.

#+BEGIN_SRC emacs-lisp
(when (featurep! :lang ledger)
  (setq ledger-clear-whole-transactions nil
        ledger-post-amount-alignment-column 52
        ledger-reconcile-buffer-line-format "%(date)s  %-30(payee)s %-25(account)s %10(amount)s\n"
        ledger-reconcile-buffer-account-max-chars 25
        ledger-reconcile-buffer-payee-max-chars 30
        ledger-report-links-in-register nil)
  (after! ledger-report
    (setq ledger-reports
          (append '(("balancesheet" "%(binary) -f %(ledger-file) balance --real Assets Liabilities")
                    ("incomestatement" "%(binary) -f %(ledger-file) balance --invert Income Expenses"))
                  ledger-reports)))

  ;; Don't reindent previous line when inserting newline.
  (setq-hook! ledger-mode electric-indent-inhibit t)

  (map! :map ledger-mode-map
        :nm "=" (general-key-dispatch 'evil-indent "=" 'ledger-post-align-dwim)
        :v  "=" #'evil-indent

        :map ledger-reconcile-mode-map
        :n "a"  #'ledger-reconcile-add
        :n "c"  #'ledger-reconcile-toggle
        :n "d"  #'ledger-reconcile-delete
        :n "t"  #'ledger-reconcile-change-target
        :n "gr" #'ledger-reconcile-refresh
        :n "q"  #'ledger-reconcile-quit
        :n "ZQ" #'ledger-reconcile-quit
        :n "ZZ" #'ledger-reconcile-finish

        :map ledger-occur-mode-map
        :nvm "q" #'ledger-occur-mode

        :localleader
        :map ledger-mode-map
        "f" #'ledger-occur

        :map ledger-reconcile-mode-map
        "," #'ledger-reconcile-toggle
        "t" #'ledger-reconcile-change-target
        "RET" #'ledger-reconcile-finish))
#+END_SRC

** Scheme (:lang scheme)

#+BEGIN_SRC emacs-lisp
(when (featurep! :lang scheme)
  (setq geiser-default-implementation 'guile)
  ;; Open files with .guile file extension in scheme-mode.
  (add-to-list 'auto-mode-alist '("\\.guile\\'" . scheme-mode) t))
#+END_SRC

** sh (:lang sh)

Configure shell script indentation style to match =shfmt=.

#+BEGIN_SRC emacs-lisp
(add-to-list 'auto-mode-alist '("\\.shinit\\'" . sh-mode) t)
(setq-hook! sh-mode
  indent-tabs-mode t
  tab-width 4
  sh-basic-offset tab-width
  sh-indent-after-continuation 'always
  sh-indent-for-case-alt '+
  sh-indent-for-case-label 0)
#+END_SRC

** HTML/CSS (:lang web)

#+BEGIN_SRC emacs-lisp
(when (featurep! :lang web)
  (setq css-indent-offset 2
        web-mode-code-indent-offset 2
        web-mode-css-indent-offset 2
        web-mode-markup-indent-offset 2)
  (add-to-list 'auto-mode-alist '("\\.ejs\\'" . web-mode) t))
#+END_SRC

** Vim script

#+BEGIN_SRC emacs-lisp
(use-package! vimrc-mode
    :mode "\\.vim\\(rc\\)?\\'")
#+END_SRC

* Terminals

** Emacs Shell (:term eshell)

A shell written entirely in elisp.

#+BEGIN_SRC emacs-lisp
(when (featurep! :term eshell)
  (after! esh-mode
    (map! :map eshell-mode-map
          :n "c"         #'evil-change
          :n "C"         #'evil-change-line
          :n "d"         #'evil-delete
          :n "D"         #'evil-delete-line
          :i "C-k"       #'kill-line
          :i "C-l"       #'eshell/clear
          :i "<up>"      #'eshell-previous-input
          :i "<down>"    #'eshell-next-input
          :i "<prior>"   #'eshell-previous-matching-input-from-input
          :i "<next>"    #'eshell-next-matching-input-from-input
          :i "S-<prior>" #'scroll-down-command
          :i "S-<next>"  #'scroll-up-command
          [remap evil-backward-section-begin] #'eshell-previous-prompt
          [remap evil-forward-section-begin] #'eshell-next-prompt
          (:localleader
           (:prefix ("t" . "toggle")
            :desc "Scroll on output" "s" #'eshell-toggle-scroll-to-bottom-on-output))))

  (after! em-alias
    (setq +eshell-aliases
          `(("dot" ,(concat "git --git-dir=\"" dotfiles-git-dir
                            "\" --work-tree=\"" (getenv "HOME") "\" $*"))
            ("edit" "find-file $1")
            ("la" "ls -A $*")
            ("ll" "ls -lah $*")
            ("mkcd" "mkdir $1 && cd $1")
            ("youtube-dl" "ajgrf/youtube-dl-url $*")))

    (unless IS-WINDOWS
      (require 'em-tramp)
      (set-eshell-alias! "sudo" "eshell/sudo $*")))

  (after! eshell
    (setq eshell-banner-message "")
    (setq eshell-prompt-function
          (lambda ()
            (concat
             (when (not (= 0 eshell-last-command-status))
               (concat (number-to-string eshell-last-command-status) "|"))
             (abbreviate-file-name (eshell/pwd))
             (if (= (user-uid) 0) "# " "$ "))))
    (setq eshell-prompt-regexp "^[^#$\n]*[#$] ")

    (setq eshell-history-size nil
          eshell-scroll-to-bottom-on-input nil)

    (defun eshell-toggle-scroll-to-bottom-on-output ()
      "Toggle `eshell-scroll-to-bottom-on-output'."
      (interactive)
      (setq eshell-scroll-to-bottom-on-output
            (not eshell-scroll-to-bottom-on-output)))

    (add-hook! eshell-mode
      (setenv "INSIDE_EMACS" (format "%s,eshell" emacs-version)))))

(when (or (featurep! :term shell)
          (featurep! :term eshell)
          (featurep! :term vterm))
  (defadvice! with-project-root (orig-fn &rest args)
    "Open shells in project root when possible."
    :around '(+shell/toggle +shell/here
              +eshell/toggle +eshell/here
              +vterm/toggle +vterm/here)
    (let ((default-directory (or (projectile-project-root)
                                 default-directory)))
      (apply orig-fn args))))
#+END_SRC

** Shell (:term shell)

Set up inferior shell, for running a shell in an Emacs buffer.

#+BEGIN_SRC emacs-lisp :noweb yes
(when (featurep! :term shell)
  (setq comint-completion-addsuffix '("/" . " "))
  ;; Recognize the password prompt from doas.
  (setq comint-password-prompt-regexp
        (concat comint-password-prompt-regexp
                "\\|^doas (.*@.*) password: \\'"))

  (when IS-WINDOWS
    ;; Prefer Powershell over cmd.exe
    (setq explicit-shell-file-name (executable-find "powershell")
          explicit-powershell.exe-args '("-NoLogo"))

    (add-hook! shell-mode
      ;; Remove input echoes
      (setq-local comint-process-echoes t)

      ;; Enable persistent history. See:
      ;; https://github.com/manzyuk/dotfiles/blob/130f86385f645f0a3a7ee6b31a479c6de2c5ce82/.emacs.d/init.el#L182
      (setq-local comint-input-ring-file-name
                  (or (getenv "HISTFILE")
                      (concat "~/AppData/Roaming/Microsoft/Windows/PowerShell/"
                              "PSReadLine/ConsoleHost_history.txt")))
      (ajgrf/turn-on-comint-history)

      ;; If the buffer associated with a process is killed, the process's
      ;; sentinel is invoked when buffer-local variables  (in particular,
      ;; `comint-input-ring-file-name' and `comint-input-ring') are gone.
      ;; Therefore try to save the history every time a buffer is killed.
      (add-hook! kill-buffer :local #'comint-write-input-ring))

    ;; Apparently, when Emacs is killed, `kill-buffer-hook' is not run
    ;; on individual buffers.  We circumvent that by adding a hook to
    ;; `kill-emacs-hook' that walks the list of all buffers and writes
    ;; the input ring (if it is available) of each buffer to a file.
    (add-hook! kill-emacs
      (mapc (lambda (buffer)
              (with-current-buffer buffer
                (comint-write-input-ring)))
            (buffer-list))))

  (map! :map shell-mode-map
        :i "C-w" #'backward-delete-word

        :map comint-mode-map
        :mode shell-mode
        :i "SPC"       #'comint-magic-space
        :i "C-k"       #'kill-line
        :i "<prior>"   #'comint-previous-matching-input-from-input
        :i "<next>"    #'comint-next-matching-input-from-input
        :i "S-<prior>" #'scroll-down-command
        :i "S-<next>"  #'scroll-up-command

        :localleader
        :mode shell-mode
        :desc "Fetch next command"  "," #'comint-get-next-from-history
        :desc "Insert previous arg" "." #'comint-insert-previous-argument
        :desc "List recent inputs"  "l" #'comint-dynamic-list-input-ring)

  ;; Make C-w behave like bash:

  ;; https://www.emacswiki.org/emacs/BackwardDeleteWord
  (defun delete-word (arg)
    "Delete characters forward until encountering the end of a word.
  With argument, do this that many times."
    (interactive "p")
    (if (use-region-p)
        (delete-region (region-beginning) (region-end))
      (delete-region (point) (progn (forward-word arg) (point)))))

  (defun backward-delete-word (arg)
    "Delete characters backward until encountering the end of a word.
  With argument, do this that many times."
    (interactive "p")
    (delete-word (- arg)))

  ;; Redefine a few word characters.
  (add-hook! shell-mode
    (dolist (c '(?_ ?- ?.))
      (modify-syntax-entry c "w"))
    (modify-syntax-entry ?/ "-"))

  <<apt-progress-bars)
#+END_SRC

*** Apt Progress Bars

Show =apt= progress bars in the minibuffer.

#+NAME: apt-progress-bars
#+BEGIN_SRC emacs-lisp :tangle no
  ;; Show =apt= progress bars in the minibuffer.
  ;; https://oremacs.com/2019/03/24/shell-apt/
  (advice-add 'ansi-color-apply-on-region :before 'ora-ansi-color-apply-on-region)

  (defun ora-ansi-color-apply-on-region (begin end)
    "Fix progress bars for e.g. apt(8).
  Display progress in the mode line instead."
    (let ((end-marker (copy-marker end))
          mb)
      (save-excursion
        (goto-char (copy-marker begin))
        (while (re-search-forward "\0337" end-marker t)
          (setq mb (match-beginning 0))
          (when (re-search-forward "\0338" end-marker t)
            (let ((progress (buffer-substring-no-properties
                             (+ mb 2) (- (point) 2))))
              (delete-region mb (point))
              (ora-apt-progress-message progress)))))))

  (defun ora-apt-progress-message (progress)
    (message
     (replace-regexp-in-string
      "%" "%%"
      (ansi-color-apply progress))))
#+END_SRC

* TODO Integrate =autoload/ajgrf.el= and =packages.el= into this file
